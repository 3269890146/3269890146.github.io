<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>无限流量梯子</title>
      <link href="/2024/02/22/%E6%97%A0%E9%99%90%E6%B5%81%E9%87%8F%E6%A2%AF%E5%AD%90/"/>
      <url>/2024/02/22/%E6%97%A0%E9%99%90%E6%B5%81%E9%87%8F%E6%A2%AF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-WARP？"><a href="#什么是-WARP？" class="headerlink" title="什么是 WARP？"></a>什么是 WARP？</h1><p>由 Cloudflare 公司出品的一款改善网络的软件，目的是让你的网络使用更加安全。</p><p>官方网址 <code>https://1.1.1.1/</code></p><p>官方客户端</p><p><code>Windows</code> <code>MacOS</code> <code>iOS</code> <code>Android</code> <code>Linux</code></p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/4b2a3f21-98a9-4e47-b88e-dc5c5e94816d" alt="WX20230714-142303@2x"></p><hr><p>速度测试如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">软件：WARP 官方客户端</span><br><span class="line">网络：Wi-Fi</span><br><span class="line">测试平台：MacOS Ventura 13.2.1，Edge浏览器</span><br><span class="line">视频质量：4K 60FPS HDR</span><br><span class="line">https://youtu.be/mkggXE5e2yk</span><br></pre></td></tr></table></figure><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/9fa70d1f-8f6f-4423-9bf7-ea0ecb830071" alt="WX20230714-145244@2x"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">软件：WARP 官方客户端</span><br><span class="line">网络：Wi-Fi</span><br><span class="line">测试平台：iPhone 6s Plus ，iOS 15.7，YouTube 客户端</span><br><span class="line">视频质量：1080P 60FPS</span><br><span class="line">https://youtu.be/mkggXE5e2yk</span><br></pre></td></tr></table></figure><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/fe9c3e98-b961-4e32-80e9-c29f1f9333ee" alt="IMG_0006"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">软件：WARP 官方 Android 客户端</span><br><span class="line">网络：5G 中国联通</span><br><span class="line">测试平台：vivo X80 Pro天玑9000版，Edge 浏览器</span><br><span class="line">视频质量：1080P 60FPS</span><br><span class="line">https://youtu.be/mkggXE5e2yk</span><br></pre></td></tr></table></figure><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/9344afcd-8caa-404b-b454-8c6ab0a89d13" alt="WechatIMG1652"></p><h2 id="WARP-小总结"><a href="#WARP-小总结" class="headerlink" title="WARP 小总结"></a>WARP 小总结</h2><p>一款还不错的，可以看到外面世界的软件，只是默认是全局，导致部分国内的软件会有较高的延迟和检测使用代理的情况，同时流量较少，新用户免费流量仅有 1GB。<br>同时，WARP 官方安卓客户端，默认是不支持 YouTube 和 Google Photo 客户端的，什么鬼！</p><p>如果遇到一直处于<code>连接中</code>或<code>无法连接</code>，那是因为 WARP 所连接的IP被墙或者丢包严重。请耐心看完后续教程，使用优选 IP 即可解决。</p><h1 id="怎么获取更多流量"><a href="#怎么获取更多流量" class="headerlink" title="怎么获取更多流量"></a>怎么获取更多流量</h1><p>软件本身自带的  private-key 只有 1GB 流量，想要获得更多流量，只能通过更换 private-key。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>找到 Telegram 机器人 <code>@generatewarpplusbot</code>，激活后它会让你关注两个频道</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/9bb5dd47-5c47-45ee-8b68-f74f502b1b94" alt="WX20230719-154811@2x"></p><p>都关注后，点击下方的 <code>I have subscribeed</code> 即可通过验证。</p><p>通过验证后，输入 <code>/generate</code> 获取密钥。</p><p>这时候机器人会弹出一个人机验证的简单算术题目。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/98046f9b-1ef3-457b-81dd-effc2d0ce2a9" alt="WX20230719-155154"></p><p>这时候根据提示，计算，然后回复答案 <code>/generate XX</code>即刻获取 <strong>24PB流量</strong> 的 private-key。同时附带一份 <code>wg-config.conf</code> 的文件（后续再说）。</p><hr><h2 id="注意⚠️"><a href="#注意⚠️" class="headerlink" title="注意⚠️"></a><strong>注意⚠️</strong></h2><blockquote><p>每24小时只能获取一枚 private-key，想再要新的 key 只能等待 24小时后再次申请。</p></blockquote><blockquote><p>再次申请 private-key 并不会导致以前申请的 key 失效。</p></blockquote><blockquote><p>每个 private-key 只能搭载 5 台设备。</p></blockquote><hr><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>通过Replit平台生成。</p><p><a href="https://replit.com/@ygkkkk/WarpKey-Register-PRO">一键生成24PB流量key</a> via<code>yonggekkk</code></p><p>打开点击右上角的<code>Run</code>即可。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/ff29e151-7e43-4fe2-90aa-b812d028f10b" alt="WX20230719-160810@2x"></p><p>运行一段时间，就能得到内含 24PB 的 private-key。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/20f582be-167c-4605-a8ec-518541135152" alt="WX20230719-160755@2x"></p><p>拿到 24PB 的 private-key 后，在软件里面更换即可。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/d30edf85-a59b-4625-9550-702c371515f6" alt="WX20230719-161553"></p><p>其他系统不演示了，自行学习。</p><h1 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h1><p>因为 WARP 客户端走的是全局代理，开启时会导致绝大部分国内软件用不了或者响应慢，甚至检测出网络异常。</p><p>通过上面获取的<code>private-key</code>获取附带的<code>wg-config.conf</code>文件可以猜想到，WARP 其实用的<code>WireGurad</code>协议。</p><p>So，如果我们用其他支持<code>WireGuard协议</code>的代理软件，就能做到分流的效果。</p><h2 id="WireGuard协议浅析"><a href="#WireGuard协议浅析" class="headerlink" title="WireGuard协议浅析"></a>WireGuard协议浅析</h2><p>WireGuard协议组成有两部分，分别是<code>Interface</code>和<code>Peer</code>。</p><p>打开刚才获取 24PB 流量时，附带的那份 <code>wg-config.conf</code> 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">PrivateKey = 2IhVcDH9iXXXXXXXXXXXXXXXXXX</span><br><span class="line">Address = 172.16.0.2/32, 2606:4700:110:89a0:cc5d:7e86:faf0:8b9/128</span><br><span class="line">DNS = 1.1.1.1, 1.0.0.1</span><br><span class="line">MTU = 1280</span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = bmXOC+XXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">AllowedIPs = 0.0.0.0/0</span><br><span class="line">AllowedIPs = ::/0</span><br><span class="line">Endpoint = engage.cloudflareclient.com:2408</span><br></pre></td></tr></table></figure><p><strong>关键信息已用X代替</strong></p><p><code>Interface</code></p><blockquote><p>PrivateKey 刚才我们获取的 24PB 流量的密钥，就不多赘述了。</p><p>Address 这里指的是内部地址，包含 IPV4 和 IPV6。在172.16.0.2&#x2F;32 中，2可以更改，范围是 255&gt;X&gt;&#x3D;2，一般来说不需要更改</p><p>DNS 那就是DNS，不明白可以百度，也不怎么需要更改。</p><p>MTU 很深奥，不需要更改，保持默认</p></blockquote><p><code>Peer</code></p><blockquote><p>PublicKey 有PrivateKey就肯定有PublicKey，你可以理解为公共钥匙。</p><p>AllowedIPs 不会解释，保持默认就好</p><p>AllowedIPs 一样，只不过上面的是 IPV4，这个是 IPV6，不用管</p><p>Endpoint 这个学问就比较深，而且一定要管。</p></blockquote><h3 id="Endpoint"><a href="#Endpoint" class="headerlink" title="Endpoint"></a>Endpoint</h3><p>这是关于 WireGuard 连接到哪个 Cloudflare 服务器的关键点，在 WARP 中，是由软件自动判断连接，如果要用第三方支持 WireGuard 的软件，则需要具体的<code>IP</code>和<code>端口</code>。</p><p>但是 CloudFlare 的 IP 和端口这么多，怎么才能找到适合中国宝宝的呢？</p><p>这就需要用到<code>WARP Endpoint IP</code>优选脚本。</p><p><strong>注意⚠️</strong></p><p><strong>所有脚本都必须在没有代理的环境下使用，切记</strong></p><hr><p><code>Windows</code></p><p>下载 <a href="https://gitlab.com/Misaka-blog/warp-script/-/blob/main/files/warp-yxip/warp-yxip-win.7z">WARP Endpoint IP优选（Windows only）</a>，并且执行即可。</p><hr><p><code>MacOS</code></p><p>打开<code>终端</code>，输入下面脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N https://gitlab.com/Misaka-blog/warp-script/-/raw/main/files/warp-yxip/warp-yxip-mac.sh &amp;&amp; bash warp-yxip-mac.sh</span><br></pre></td></tr></table></figure><p>无需重新下载，再次运行输入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash warp-yxip-mac.sh</span><br></pre></td></tr></table></figure><hr><p><code>iOS与Android</code></p><p>iOS需要下载软件<code>iSH</code>，Android需要下载<code>Termux</code></p><p>复制下面脚本并运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N https://gitlab.com/Misaka-blog/warp-script/-/raw/main/files/warp-yxip/warp-yxip.sh &amp;&amp; bash warp-yxip.sh</span><br></pre></td></tr></table></figure><p>无需重新下载，再次运行输入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash warp-yxip.sh</span><br></pre></td></tr></table></figure><p>如果Android<code>Termux</code>提示无<code>Wget</code>，则先运行下面命令安装 Wget</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg update &amp;&amp; pkg install wget</span><br></pre></td></tr></table></figure><p>iOS有同样问题，则运行下面命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add -f openssh bash wget</span><br></pre></td></tr></table></figure><p>iOS遇到更新包卡着不动输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apk/repositories</span><br></pre></td></tr></table></figure><hr><p><strong>追加备用通用平台脚本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://gitlab.com/rwkgyg/CFwarp/raw/main/point/endip.sh -o endip.sh &amp;&amp; chmod +x endip.sh &amp;&amp; ./endip.sh</span><br></pre></td></tr></table></figure><p>方法一样，windows使用<code>PowerShell</code>，MacOS使用<code>终端</code>，iOS使用<code>iSH</code>，安卓使用<code>Termux</code></p><p>脚本来自<a href="https://gitlab.com/Misaka-blog/warp-script">Misaka</a>，备用脚本来自<a href="https://gitlab.com/rwkgyg/CFwarp">rwkgyg</a></p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>通过上面的脚本，就能获取根据你网络筛选出来的最优 Endpoint，包含<code>IP</code>和<code>端口</code>，如图示，</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/b47b664b-7c66-4d7b-afcd-5f2eda308155" alt="2"></p><p>打开<code>wg-config.conf</code>文件，找到<code>Endpoint = engage.cloudflareclient.com:2408</code>这一段参数，把里面的<code>engage.cloudflareclient.com:2408</code>替换成截图上的其中一个IP即可。</p><p><strong>然后就可以用<code>wg-config.conf</code>这份文件，导入到你的代理软件中。当然，你也可以根据配置文件逐个填入。</strong></p><p><strong>iOS端</strong></p><p><code>Shadowrocket</code> <code>Loon</code> <code>Surge</code> <code>WireGuard</code>等</p><p><code>Shadowrocket</code>使用方法</p><p>支持文件配置导入，二维码导入和手动填写，按照提示操作即可。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/432da9d7-aa9a-473e-8072-ddd0bc988aa4" alt="5"></p><p><code>Loon</code>使用方法</p><p>支持二维码导入和手动填写，填入时要选择<code>本地节点</code>而非添加订阅。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/fa6846ee-51c2-492a-8a50-4aa43d6652d0" alt="6"></p><p><code>WireGuard</code>使用方法</p><p>支持文件配置导入，二维码导入和手动填写。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/77943c6f-f13c-4652-92d6-cc44748118b2" alt="7"></p><p>速度测试</p><p><code>Shadowrocket</code><br><img src="https://github.com/SeverideLo/WARP-/assets/83275041/3fa92343-eeb5-4420-8d1d-ddd27d23f6ca" alt="3"></p><p><code>Loon</code><br><img src="https://github.com/SeverideLo/WARP-/assets/83275041/9252478b-12ff-43fc-8f6f-2e78f8ac7e01" alt="4"></p><p> <code>WireGuard</code><br> <img src="https://github.com/SeverideLo/WARP-/assets/83275041/b9931c72-d243-4478-83cc-4c73a92c19fc" alt="8"></p><p>测试受到第三方客观因素，包括且不限于<code>运营商</code>，<code>网络高峰</code>，<code>Endpoint IP</code>等，请结合实际择优。</p><p>个人主观感受：Shadowrocket 对于 WireGuard 的支持很差，不推荐。另外两个表现尚可，不过支持分流的只有 Loon</p><hr><p><strong>Android</strong></p><p>安卓这边，支持<code>WireGuard协议</code>的代理软件不多，但不推荐使用官方的<code>WARP</code>，毕竟看不了YouTube，推荐直接使用 PlayStore 的<a href="https://play.google.com/store/search?q=wireguard&c=apps">Wireguard</a></p><p>想要分流的话，推荐使用<a href="https://matsuridayo.github.io/index_docs/">NB4A</a>，项目主页<code>https://github.com/MatsuriDayo/NekoBoxForAndroid</code></p><p>推荐在官网或者项目主页下载，从 PlayStore 下载要氪金。</p><p><code>NB4A</code>使用方法</p><p>支持文件配置导入，剪贴板导入，二维码导入和手动填写。</p><p>软件能自动生成关于 WARP 的配置信息，具体步骤见图。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/af9f0611-4bc4-471d-8243-8d02538adb5b" alt="9"></p><p>暂不清楚从软件中生成的 WARP 配置是否包含 24PB 流量，建议自己导入配置。</p><p>NB4A分流有两种：<code>路由分流</code>和<code>软件分流</code></p><p><code>路由分流</code>把这 3 个开关打开后，可以做到最简单的路由分流。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/c0a655b0-e722-454a-94ed-fa43128e3cf9" alt="11"></p><p>由域名判断走直连还是代理，需要加入走代理的域名，参考<a href="https://matsuridayo.github.io/m-route/">路由代理详细设置</a></p><p><code>软件分流</code>更加直接，直接规定哪个软件走代理，哪个走直连。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/c68eae63-e070-4605-b3a8-9ef66045adc8" alt="nb4a-bhw-domestic-1"></p><p>从<a href="https://ip.skk.moe/">IP查询</a>看出，分流没问题。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/deb26fe8-b827-41ca-b7bd-31f85f76ca3e" alt="12"></p><p><code>速度测试</code></p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/e7af4c7d-cc0e-4dcc-99db-b19851807174" alt="13"></p><p>如果遇到<code>失败::decode config:outbound opitions:jason:cannot unmarshal arry into Go Struct field WireGuardoutboundOptions.local_address of type string</code>报错，不要惊慌。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/41a15c6b-ed60-44e9-a174-c8a8f5382613" alt="微信图片_20230719230239"></p><p>因为 NB4A 导入 wg-config.conf 时，本地地址出现一点问题。</p><p>在 NB4A 中打开刚导入的配置信息，把本地地址这一栏中的 IPV6 全部删除，只留下<code>172.16.0.2/32</code>即可。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/04639aac-a3fb-4716-b154-ec22555f8440" alt="251"></p><p>每次通过 NB4A 连接需要 3~8 秒握手，请耐心等待。</p><p>更多关于<code>NB4A</code>的问题，请看官方<a href="https://matsuridayo.github.io/nb4a-faq/">FAQ</a> 和 <a href="https://matsuridayo.github.io/nb4a-bhw-domestic/">分流解释</a></p><p>说个甜点，<code>NB4A</code>居然支持<code>Clash格式</code>和<code>Clash Meta格式</code>，同时内置<code>Clash Dashboard Web</code>，赞！！！</p><h2 id="总结一下移动端的代理软件"><a href="#总结一下移动端的代理软件" class="headerlink" title="总结一下移动端的代理软件"></a>总结一下移动端的代理软件</h2><p>速度方面其实并不严谨，因为还是有很多客观因素影响。</p><p>但有一点无容置疑，虽然 Shadowrocket 很多人使用，但是对于<code>WireGuard协议</code>的支持真就一坨💩。</p><h2 id="openWRT"><a href="#openWRT" class="headerlink" title="openWRT"></a>openWRT</h2><p>首先保证你的openwrt中的<code>openclash</code>处于最新版本。</p><p>且保证能成功更新，并使用<code>Meta内核</code>。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/bf263757-b633-463b-bf48-c3c4a33d28e7" alt="WX20230719-181515@2x"></p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/0f236c8f-476e-41f7-b40f-f7a32790a043" alt="WX20230719-181457@2x"></p><p>在项目的<a href="https://github.com/SeverideLo/WARP-/releases">Releases</a>中，下载<code>warp-clash.yaml</code>（配置文件来自<a href="https://v.xss.sx/pass-wall/warp">花墨世界</a>）</p><p>打开<code>warp-clash.yaml</code>，更改其中的提示项目：<code>修改为优选IP</code>，<code>端口</code>，<code>公钥</code>，<code>私钥</code>，保存。</p><p>在<code>openclash</code>中上传修改后的<code>warp-clash.yaml</code>。</p><p><img src="https://github.com/SeverideLo/WARP-/assets/83275041/31fb6f17-f7bd-4ac7-badb-46d7c3be49de" alt="WX20230719-182409@2x"></p><h1 id="简单一句话，以后看YouTube，不怕没流量，DDDD"><a href="#简单一句话，以后看YouTube，不怕没流量，DDDD" class="headerlink" title="简单一句话，以后看YouTube，不怕没流量，DDDD"></a>简单一句话，以后看YouTube，不怕没流量，DDDD</h1><p>搞定收工！完结撒花！</p><p>🌹🌷🌺🌼🌸💐🪷🍀🌹🌷🌺🌼🌸💐🪷🍀🌹🌷🌺🌼🌸💐🪷🍀🌹🌷🌺🌼🌸💐🪷🍀🌹🌷🌺🌼🌸💐🪷🍀</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT教程</title>
      <link href="/2024/02/20/ChatGPT%E6%95%99%E7%A8%8B/"/>
      <url>/2024/02/20/ChatGPT%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>以下是使用 OpenAI 的 ChatGPT 的教程：</p><ol><li><p>导入所需的库和模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br></pre></td></tr></table></figure></li><li><p>设置 OpenAI 的 API 密钥：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openai.api_key = <span class="string">&quot;YOUR_API_KEY&quot;</span></span><br></pre></td></tr></table></figure><p>将 “YOUR_API_KEY” 替换为你自己的 API 密钥。</p></li><li><p>使用 ChatGPT 进行对话：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">chat_with_gpt</span>(<span class="params">prompt</span>):</span><br><span class="line">    response = openai.Completion.create(</span><br><span class="line">        engine=<span class="string">&quot;text-davinci-003&quot;</span>,</span><br><span class="line">        prompt=prompt,</span><br><span class="line">        max_tokens=<span class="number">100</span>,</span><br><span class="line">        temperature=<span class="number">0.6</span>,</span><br><span class="line">        n=<span class="number">1</span>,</span><br><span class="line">        stop=<span class="literal">None</span>,</span><br><span class="line">        timeout=<span class="literal">None</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].text.strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        user_input = <span class="built_in">input</span>(<span class="string">&quot;User: &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_input.lower() == <span class="string">&quot;quit&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用用户输入作为ChatGPT的提示来生成回复</span></span><br><span class="line">        response = chat_with_gpt(user_input)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印ChatGPT生成的回复</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ChatGPT: &quot;</span> + response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>运行代码并进行对话：</p><p>在终端中，运行上述 Python 脚本，然后输入你想要与 ChatGPT 进行对话的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python chatgpt_tutorial.py</span><br><span class="line">User: Hello, how are you?</span><br><span class="line">ChatGPT: I<span class="string">&#x27;m doing well, thank you for asking. How can I assist you today?</span></span><br><span class="line"><span class="string">User: Can you help me with some programming questions?</span></span><br><span class="line"><span class="string">ChatGPT: Of course! I&#x27;</span>ll <span class="keyword">do</span> my best to <span class="built_in">help</span> you. What specific programming questions <span class="keyword">do</span> you have?</span><br><span class="line">User: Quit</span><br></pre></td></tr></table></figure><p>输入 “Quit” 来退出对话。</p></li></ol><p>这是一个简单的基于 OpenAI 的 ChatGPT 的教程示例。你可以根据自己的需要进行修改和扩展。最后，我将生成的教程保存为一个 markdown 文件供您参考。</p><hr><h1 id="使用-OpenAI-ChatGPT-的教程"><a href="#使用-OpenAI-ChatGPT-的教程" class="headerlink" title="使用 OpenAI ChatGPT 的教程"></a>使用 OpenAI ChatGPT 的教程</h1><p>对话系统使用 OpenAI 的 ChatGPT 模型。你可以按照以下步骤来使用 ChatGPT：</p><ol><li><p>导入所需的库和模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br></pre></td></tr></table></figure></li><li><p>设置 OpenAI 的 API 密钥：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openai.api_key = <span class="string">&quot;YOUR_API_KEY&quot;</span></span><br></pre></td></tr></table></figure><p>将 “YOUR_API_KEY” 替换为你自己的 API 密钥。</p></li><li><p>使用 ChatGPT 进行对话：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">chat_with_gpt</span>(<span class="params">prompt</span>):</span><br><span class="line">    <span class="comment"># 使用 OpenAI 的 API 进行对话生成</span></span><br><span class="line">    response = openai.Completion.create(</span><br><span class="line">        engine=<span class="string">&quot;text-davinci-003&quot;</span>,</span><br><span class="line">        prompt=prompt,</span><br><span class="line">        max_tokens=<span class="number">100</span>,</span><br><span class="line">        temperature=<span class="number">0.6</span>,</span><br><span class="line">        n=<span class="number">1</span>,</span><br><span class="line">        stop=<span class="literal">None</span>,</span><br><span class="line">        timeout=<span class="literal">None</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].text.strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        user_input = <span class="built_in">input</span>(<span class="string">&quot;User: &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_input.lower() == <span class="string">&quot;quit&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用用户输入作为ChatGPT的提示来生成回复</span></span><br><span class="line">        response = chat_with_gpt(user_input)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印ChatGPT生成的回复</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ChatGPT: &quot;</span> + response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>运行代码并进行对话：</p><p>在终端中，运行上述 Python 脚本，然后输入你想要与 ChatGPT 进行对话的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python chatgpt_tutorial.py</span><br><span class="line">User: Hello, how are you?</span><br><span class="line">ChatGPT: I<span class="string">&#x27;m doing well, thank you for asking. How can I assist you today?</span></span><br><span class="line"><span class="string">User: Can you help me with some programming questions?</span></span><br><span class="line"><span class="string">ChatGPT: Of course! I&#x27;</span>ll <span class="keyword">do</span> my best to <span class="built_in">help</span> you. What specific programming questions <span class="keyword">do</span> you have?</span><br><span class="line">User: Quit</span><br></pre></td></tr></table></figure><p>输入 “Quit” 来退出对话。</p></li></ol><p>这是一个简单的基于 OpenAI 的 ChatGPT 的教程示例。你可以根据自己的需要进行修改和扩展。</p><hr><p>希望这个教程能帮助你了解如何使用 OpenAI 的 ChatGPT。如果有任何问题，请随时提问。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站教程</title>
      <link href="/2024/02/16/%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B/"/>
      <url>/2024/02/16/%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客搭建教程"><a href="#Hexo博客搭建教程" class="headerlink" title="Hexo博客搭建教程"></a>Hexo博客搭建教程</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Hexo是一个快速、简洁且高效的静态博客框架，基于Node.js驱动。它使用Markdown作为文章编写格式，支持各种插件和主题，可以方便地搭建和管理个人博客。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1. 安装Node.js"></a>1. 安装Node.js</h3><p>首先，你需要在你的计算机上安装Node.js。Node.js是一种基于Chrome V8引擎的JavaScript运行环境，可以让你运行JavaScript代码。你可以从Node.js官方网站（<a href="https://nodejs.org/">https://nodejs.org</a> ）上下载适合你操作系统的安装包，并按照安装向导进行安装。</p><h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h3><p>在安装Node.js之后，你需要通过Node.js的包管理工具npm来安装Hexo。npm已经随着Node.js的安装一起安装好了。在命令行中执行以下命令来安装Hexo：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="3-初始化博客"><a href="#3-初始化博客" class="headerlink" title="3. 初始化博客"></a>3. 初始化博客</h3><p>安装完Hexo之后，你需要在你的项目文件夹中初始化你的博客。在命令行中执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myblog</span><br><span class="line">$ cd myblog</span><br></pre></td></tr></table></figure><p>这将会在当前目录下创建一个名为<code>myblog</code>的文件夹，并初始化一个Hexo博客。</p><h3 id="4-编写文章"><a href="#4-编写文章" class="headerlink" title="4. 编写文章"></a>4. 编写文章</h3><p>在Hexo中，你可以使用Markdown来编写博客文章。在命令行中执行以下命令，Hexo会为你创建一篇新的Markdown格式的文章：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;Hello World&quot;</span><br></pre></td></tr></table></figure><p>这将会在项目文件夹的<code>source/_posts</code>目录下创建一个名为<code>hello-world.md</code>的Markdown文件。你可以使用任何文本编辑器来编辑这个文件，并写下你想要发布的博客内容。</p><h3 id="5-生成静态文件"><a href="#5-生成静态文件" class="headerlink" title="5. 生成静态文件"></a>5. 生成静态文件</h3><p>在你完成博客的编写后，你需要生成静态文件以供部署。在命令行中执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>执行这个命令后，Hexo会静态生成你的博客，并将生成的文件保存在项目文件夹下的<code>public</code>目录中。</p><h3 id="6-预览博客"><a href="#6-预览博客" class="headerlink" title="6. 预览博客"></a>6. 预览博客</h3><p>你可以在本地预览你的博客，以确保一切正常。在命令行中执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>然后打开你的浏览器，访问<code>http://localhost:4000</code>，你将能够看到你的博客。</p><h3 id="7-部署博客"><a href="#7-部署博客" class="headerlink" title="7. 部署博客"></a>7. 部署博客</h3><p>最后一步是将生成的静态文件部署到服务器上，以便其他人可以访问你的博客。你可以选择将静态文件上传到你的服务器上，或者使用Hexo的部署命令来自动部署。配置好部署参数后，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>Hexo会将静态文件自动部署到指定的位置。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过以上简单的步骤，你就可以搭建和管理自己的Hexo博客了。希望这个教程对你有所帮助！祝你在Hexo的世界中享受写作和分享的乐趣！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/02/16/hello-world/"/>
      <url>/2024/02/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
